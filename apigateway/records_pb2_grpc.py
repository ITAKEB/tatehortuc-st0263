# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import records_pb2 as records__pb2


class FilesServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListFiles = channel.unary_unary(
            '/FilesService/ListFiles',
            request_serializer=records__pb2.EmptyMessage.SerializeToString,
            response_deserializer=records__pb2.ListFilesResponse.FromString,
        )


class FilesServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FilesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'ListFiles': grpc.unary_unary_rpc_method_handler(
            servicer.ListFiles,
            request_deserializer=records__pb2.EmptyMessage.FromString,
            response_serializer=records__pb2.ListFilesResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'FilesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.


class FilesService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListFiles(request,
                  target,
                  options=(),
                  channel_credentials=None,
                  call_credentials=None,
                  insecure=False,
                  compression=None,
                  wait_for_ready=None,
                  timeout=None,
                  metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FilesService/ListFiles',
                                             records__pb2.EmptyMessage.SerializeToString,
                                             records__pb2.ListFilesResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class FindFilesServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FindFiles = channel.unary_unary(
            '/FindFilesService/FindFiles',
            request_serializer=records__pb2.NameMessage.SerializeToString,
            response_deserializer=records__pb2.FindFileResponse.FromString,
        )


class FindFilesServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FindFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FindFilesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'FindFiles': grpc.unary_unary_rpc_method_handler(
            servicer.FindFiles,
            request_deserializer=records__pb2.NameMessage.FromString,
            response_serializer=records__pb2.FindFileResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'FindFilesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.


class FindFilesService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FindFiles(request,
                  target,
                  options=(),
                  channel_credentials=None,
                  call_credentials=None,
                  insecure=False,
                  compression=None,
                  wait_for_ready=None,
                  timeout=None,
                  metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FindFilesService/FindFiles',
                                             records__pb2.NameMessage.SerializeToString,
                                             records__pb2.FindFileResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
