# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import records_pb2 as records__pb2


class CrudStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateQueue = channel.unary_unary(
                '/Crud/CreateQueue',
                request_serializer=records__pb2.CreateRequest.SerializeToString,
                response_deserializer=records__pb2.CreateReply.FromString,
                )
        self.ReadQueue = channel.unary_unary(
                '/Crud/ReadQueue',
                request_serializer=records__pb2.ReadRequest.SerializeToString,
                response_deserializer=records__pb2.ReadReply.FromString,
                )
        self.DeleteQueue = channel.unary_unary(
                '/Crud/DeleteQueue',
                request_serializer=records__pb2.DeleteRequest.SerializeToString,
                response_deserializer=records__pb2.DeleteReply.FromString,
                )
        self.PutQueue = channel.unary_unary(
                '/Crud/PutQueue',
                request_serializer=records__pb2.PutRequest.SerializeToString,
                response_deserializer=records__pb2.PutReply.FromString,
                )
        self.GetQueues = channel.unary_unary(
                '/Crud/GetQueues',
                request_serializer=records__pb2.GetRequest.SerializeToString,
                response_deserializer=records__pb2.GetReply.FromString,
                )


class CrudServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQueues(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CrudServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateQueue,
                    request_deserializer=records__pb2.CreateRequest.FromString,
                    response_serializer=records__pb2.CreateReply.SerializeToString,
            ),
            'ReadQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadQueue,
                    request_deserializer=records__pb2.ReadRequest.FromString,
                    response_serializer=records__pb2.ReadReply.SerializeToString,
            ),
            'DeleteQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteQueue,
                    request_deserializer=records__pb2.DeleteRequest.FromString,
                    response_serializer=records__pb2.DeleteReply.SerializeToString,
            ),
            'PutQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.PutQueue,
                    request_deserializer=records__pb2.PutRequest.FromString,
                    response_serializer=records__pb2.PutReply.SerializeToString,
            ),
            'GetQueues': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQueues,
                    request_deserializer=records__pb2.GetRequest.FromString,
                    response_serializer=records__pb2.GetReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Crud', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Crud(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Crud/CreateQueue',
            records__pb2.CreateRequest.SerializeToString,
            records__pb2.CreateReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Crud/ReadQueue',
            records__pb2.ReadRequest.SerializeToString,
            records__pb2.ReadReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Crud/DeleteQueue',
            records__pb2.DeleteRequest.SerializeToString,
            records__pb2.DeleteReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PutQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Crud/PutQueue',
            records__pb2.PutRequest.SerializeToString,
            records__pb2.PutReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetQueues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Crud/GetQueues',
            records__pb2.GetRequest.SerializeToString,
            records__pb2.GetReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
